{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.array.sort.js","webpack:///./node_modules/core-js/modules/_strict-method.js","webpack:///./node_modules/cssbeautify/cssbeautify.js","webpack:///./node_modules/prismjs/prism.js"],"names":["$export","__webpack_require__","aFunction","toObject","fails","$sort","sort","test","P","F","undefined","comparefn","call","this","module","exports","method","arg","style","opt","options","blocks","ch","ch2","str","state","State","depth","quote","comment","trimRight","index","length","formatted","openbracesuffix","autosemicolon","isWhitespace","c","isQuote","isName","indexOf","appendIndent","i","indent","openBlock","closeBlock","last","charAt","push","arguments","openbrace","String","prototype","s","replace","Start","AtRule","Block","Selector","Ruleset","Property","Separator","Expression","URL","charCodeAt","substr","join","_self","window","WorkerGlobalScope","self","Prism","lang","uniqueId","_","manual","disableWorkerMessageHandler","util","encode","tokens","Token","type","content","alias","map","o","Object","toString","match","objId","obj","defineProperty","value","clone","visited","key","hasOwnProperty","forEach","v","languages","extend","id","redef","insertBefore","inside","before","insert","root","grammar","newToken","ret","token","DFS","callback","plugins","highlightAll","async","highlightAllUnder","document","container","env","selector","hooks","run","element","elements","querySelectorAll","highlightElement","language","parent","className","parentNode","toLowerCase","nodeName","code","textContent","Worker","worker","filename","onmessage","evt","highlightedCode","data","innerHTML","postMessage","JSON","stringify","immediateClose","highlight","text","tokenize","matchGrammar","strarr","startPos","oneshot","target","patterns","j","pattern","lookbehind","greedy","lookbehindLength","global","flags","RegExp","source","pos","lastIndex","exec","from","to","k","p","len","delNum","slice","after","args","wrapped","Array","splice","apply","rest","all","add","name","callbacks","matchedStr","tag","classes","attributes","aliases","keys","addEventListener","message","parse","close","script","currentScript","getElementsByTagName","pop","src","hasAttribute","readyState","requestAnimationFrame","setTimeout","markup","prolog","doctype","cdata","punctuation","namespace","attr-value","attr-name","entity","xml","html","mathml","svg","css","atrule","rule","url","string","property","important","function","style-attr","clike","class-name","keyword","boolean","number","operator","javascript","regex","function-variable","constant","template-string","interpolation","interpolation-punctuation","js","querySelector","fileHighlight","Extensions","py","rb","ps1","psm1","sh","bat","h","tex","pre","getAttribute","extension","createElement","appendChild","xhr","XMLHttpRequest","open","onreadystatechange","status","responseText","statusText","send","toolbar","registerButton","a","setAttribute","href"],"mappings":"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","file":"7-c4b5c0cb98d78521c94e.js","sourcesContent":["'use strict';\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar fails = require('./_fails');\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !require('./_strict-method')($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","'use strict';\nvar fails = require('./_fails');\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n","/*\n Copyright (C) 2013 Sencha Inc.\n Copyright (C) 2012 Sencha Inc.\n Copyright (C) 2011 Sencha Inc.\n\n Author: Ariya Hidayat.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n*/\n\n/*jslint continue: true, indent: 4 */\n/*global exports:true, module:true, window:true */\n\n(function () {\n\n    'use strict';\n\n    function cssbeautify(style, opt) {\n\n        var options, index = 0, length = style.length, blocks, formatted = '',\n            ch, ch2, str, state, State, depth, quote, comment,\n            openbracesuffix = true,\n            autosemicolon = false,\n            trimRight;\n\n        options = arguments.length > 1 ? opt : {};\n        if (typeof options.indent === 'undefined') {\n            options.indent = '    ';\n        }\n        if (typeof options.openbrace === 'string') {\n            openbracesuffix = (options.openbrace === 'end-of-line');\n        }\n        if (typeof options.autosemicolon === 'boolean') {\n            autosemicolon = options.autosemicolon;\n        }\n\n        function isWhitespace(c) {\n            return (c === ' ') || (c === '\\n') || (c === '\\t') || (c === '\\r') || (c === '\\f');\n        }\n\n        function isQuote(c) {\n            return (c === '\\'') || (c === '\"');\n        }\n\n        // FIXME: handle Unicode characters\n        function isName(c) {\n            return (ch >= 'a' && ch <= 'z') ||\n                (ch >= 'A' && ch <= 'Z') ||\n                (ch >= '0' && ch <= '9') ||\n                '-_*.:#[]'.indexOf(c) >= 0;\n        }\n\n        function appendIndent() {\n            var i;\n            for (i = depth; i > 0; i -= 1) {\n                formatted += options.indent;\n            }\n        }\n\n        function openBlock() {\n            formatted = trimRight(formatted);\n            if (openbracesuffix) {\n                formatted += ' {';\n            } else {\n                formatted += '\\n';\n                appendIndent();\n                formatted += '{';\n            }\n            if (ch2 !== '\\n') {\n                formatted += '\\n';\n            }\n            depth += 1;\n        }\n\n        function closeBlock() {\n            var last;\n            depth -= 1;\n            formatted = trimRight(formatted);\n\n            if (formatted.length > 0 && autosemicolon) {\n                last = formatted.charAt(formatted.length - 1);\n                if (last !== ';' && last !== '{') {\n                    formatted += ';';\n                }\n            }\n\n            formatted += '\\n';\n            appendIndent();\n            formatted += '}';\n            blocks.push(formatted);\n            formatted = '';\n        }\n\n        if (String.prototype.trimRight) {\n            trimRight = function (s) {\n                return s.trimRight();\n            };\n        } else {\n            // old Internet Explorer\n            trimRight = function (s) {\n                return s.replace(/\\s+$/, '');\n            };\n        }\n\n        State = {\n            Start: 0,\n            AtRule: 1,\n            Block: 2,\n            Selector: 3,\n            Ruleset: 4,\n            Property: 5,\n            Separator: 6,\n            Expression: 7,\n            URL: 8\n        };\n\n        depth = 0;\n        state = State.Start;\n        comment = false;\n        blocks = [];\n\n        // We want to deal with LF (\\n) only\n        style = style.replace(/\\r\\n/g, '\\n');\n\n        while (index < length) {\n            ch = style.charAt(index);\n            ch2 = style.charAt(index + 1);\n            index += 1;\n\n            // Inside a string literal?\n            if (isQuote(quote)) {\n                formatted += ch;\n                if (ch === quote) {\n                    quote = null;\n                }\n                if (ch === '\\\\' && ch2 === quote) {\n                    // Don't treat escaped character as the closing quote\n                    formatted += ch2;\n                    index += 1;\n                }\n                continue;\n            }\n\n            // Starting a string literal?\n            if (isQuote(ch)) {\n                formatted += ch;\n                quote = ch;\n                continue;\n            }\n\n            // Comment\n            if (comment) {\n                formatted += ch;\n                if (ch === '*' && ch2 === '/') {\n                    comment = false;\n                    formatted += ch2;\n                    index += 1;\n                }\n                continue;\n            }\n            if (ch === '/' && ch2 === '*') {\n                comment = true;\n                formatted += ch;\n                formatted += ch2;\n                index += 1;\n                continue;\n            }\n\n            if (state === State.Start) {\n\n                if (blocks.length === 0) {\n                    if (isWhitespace(ch) && formatted.length === 0) {\n                        continue;\n                    }\n                }\n\n                // Copy white spaces and control characters\n                if (ch <= ' ' || ch.charCodeAt(0) >= 128) {\n                    state = State.Start;\n                    formatted += ch;\n                    continue;\n                }\n\n                // Selector or at-rule\n                if (isName(ch) || (ch === '@')) {\n\n                    // Clear trailing whitespaces and linefeeds.\n                    str = trimRight(formatted);\n\n                    if (str.length === 0) {\n                        // If we have empty string after removing all the trailing\n                        // spaces, that means we are right after a block.\n                        // Ensure a blank line as the separator.\n                        if (blocks.length > 0) {\n                            formatted = '\\n\\n';\n                        }\n                    } else {\n                        // After finishing a ruleset or directive statement,\n                        // there should be one blank line.\n                        if (str.charAt(str.length - 1) === '}' ||\n                                str.charAt(str.length - 1) === ';') {\n\n                            formatted = str + '\\n\\n';\n                        } else {\n                            // After block comment, keep all the linefeeds but\n                            // start from the first column (remove whitespaces prefix).\n                            while (true) {\n                                ch2 = formatted.charAt(formatted.length - 1);\n                                if (ch2 !== ' ' && ch2.charCodeAt(0) !== 9) {\n                                    break;\n                                }\n                                formatted = formatted.substr(0, formatted.length - 1);\n                            }\n                        }\n                    }\n                    formatted += ch;\n                    state = (ch === '@') ? State.AtRule : State.Selector;\n                    continue;\n                }\n            }\n\n            if (state === State.AtRule) {\n\n                // ';' terminates a statement.\n                if (ch === ';') {\n                    formatted += ch;\n                    state = State.Start;\n                    continue;\n                }\n\n                // '{' starts a block\n                if (ch === '{') {\n                    str = trimRight(formatted);\n                    openBlock();\n                    state = (str === '@font-face') ? State.Ruleset : State.Block;\n                    continue;\n                }\n\n                formatted += ch;\n                continue;\n            }\n\n            if (state === State.Block) {\n\n                // Selector\n                if (isName(ch)) {\n\n                    // Clear trailing whitespaces and linefeeds.\n                    str = trimRight(formatted);\n\n                    if (str.length === 0) {\n                        // If we have empty string after removing all the trailing\n                        // spaces, that means we are right after a block.\n                        // Ensure a blank line as the separator.\n                        if (blocks.length > 0) {\n                            formatted = '\\n\\n';\n                        }\n                    } else {\n                        // Insert blank line if necessary.\n                        if (str.charAt(str.length - 1) === '}') {\n                            formatted = str + '\\n\\n';\n                        } else {\n                            // After block comment, keep all the linefeeds but\n                            // start from the first column (remove whitespaces prefix).\n                            while (true) {\n                                ch2 = formatted.charAt(formatted.length - 1);\n                                if (ch2 !== ' ' && ch2.charCodeAt(0) !== 9) {\n                                    break;\n                                }\n                                formatted = formatted.substr(0, formatted.length - 1);\n                            }\n                        }\n                    }\n\n                    appendIndent();\n                    formatted += ch;\n                    state = State.Selector;\n                    continue;\n                }\n\n                // '}' resets the state.\n                if (ch === '}') {\n                    closeBlock();\n                    state = State.Start;\n                    continue;\n                }\n\n                formatted += ch;\n                continue;\n            }\n\n            if (state === State.Selector) {\n\n                // '{' starts the ruleset.\n                if (ch === '{') {\n                    openBlock();\n                    state = State.Ruleset;\n                    continue;\n                }\n\n                // '}' resets the state.\n                if (ch === '}') {\n                    closeBlock();\n                    state = State.Start;\n                    continue;\n                }\n\n                formatted += ch;\n                continue;\n            }\n\n            if (state === State.Ruleset) {\n\n                // '}' finishes the ruleset.\n                if (ch === '}') {\n                    closeBlock();\n                    state = State.Start;\n                    if (depth > 0) {\n                        state = State.Block;\n                    }\n                    continue;\n                }\n\n                // Make sure there is no blank line or trailing spaces inbetween\n                if (ch === '\\n') {\n                    formatted = trimRight(formatted);\n                    formatted += '\\n';\n                    continue;\n                }\n\n                // property name\n                if (!isWhitespace(ch)) {\n                    formatted = trimRight(formatted);\n                    formatted += '\\n';\n                    appendIndent();\n                    formatted += ch;\n                    state = State.Property;\n                    continue;\n                }\n                formatted += ch;\n                continue;\n            }\n\n            if (state === State.Property) {\n\n                // ':' concludes the property.\n                if (ch === ':') {\n                    formatted = trimRight(formatted);\n                    formatted += ': ';\n                    state = State.Expression;\n                    if (isWhitespace(ch2)) {\n                        state = State.Separator;\n                    }\n                    continue;\n                }\n\n                // '}' finishes the ruleset.\n                if (ch === '}') {\n                    closeBlock();\n                    state = State.Start;\n                    if (depth > 0) {\n                        state = State.Block;\n                    }\n                    continue;\n                }\n\n                formatted += ch;\n                continue;\n            }\n\n            if (state === State.Separator) {\n\n                // Non-whitespace starts the expression.\n                if (!isWhitespace(ch)) {\n                    formatted += ch;\n                    state = State.Expression;\n                    continue;\n                }\n\n                // Anticipate string literal.\n                if (isQuote(ch2)) {\n                    state = State.Expression;\n                }\n\n                continue;\n            }\n\n            if (state === State.Expression) {\n\n                // '}' finishes the ruleset.\n                if (ch === '}') {\n                    closeBlock();\n                    state = State.Start;\n                    if (depth > 0) {\n                        state = State.Block;\n                    }\n                    continue;\n                }\n\n                // ';' completes the declaration.\n                if (ch === ';') {\n                    formatted = trimRight(formatted);\n                    formatted += ';\\n';\n                    state = State.Ruleset;\n                    continue;\n                }\n\n                formatted += ch;\n\n                if (ch === '(') {\n                    if (formatted.charAt(formatted.length - 2) === 'l' &&\n                            formatted.charAt(formatted.length - 3) === 'r' &&\n                            formatted.charAt(formatted.length - 4) === 'u') {\n\n                        // URL starts with '(' and closes with ')'.\n                        state = State.URL;\n                        continue;\n                    }\n                }\n\n                continue;\n            }\n\n            if (state === State.URL) {\n\n\n                // ')' finishes the URL (only if it is not escaped).\n                if (ch === ')' && formatted.charAt(formatted.length - 1 !== '\\\\')) {\n                    formatted += ch;\n                    state = State.Expression;\n                    continue;\n                }\n            }\n\n            // The default action is to copy the character (to prevent\n            // infinite loop).\n            formatted += ch;\n        }\n\n        formatted = blocks.join('') + formatted;\n\n        return formatted;\n    }\n\n    if (typeof exports !== 'undefined') {\n        // Node.js module.\n        module.exports = exports = cssbeautify;\n    } else if (typeof window === 'object') {\n        // Browser loading.\n        window.cssbeautify = cssbeautify;\n    }\n\n}());\n","\n/* **********************************************\n     Begin prism-core.js\n********************************************** */\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t? self // if in worker\n\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n * MIT license http://www.opensource.org/licenses/mit-license.php/\n * @author Lea Verou http://lea.verou.me\n */\n\nvar Prism = (function(){\n\n// Private helper vars\nvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\nvar uniqueId = 0;\n\nvar _ = _self.Prism = {\n\tmanual: _self.Prism && _self.Prism.manual,\n\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\tutil: {\n\t\tencode: function (tokens) {\n\t\t\tif (tokens instanceof Token) {\n\t\t\t\treturn new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n\t\t\t} else if (_.util.type(tokens) === 'Array') {\n\t\t\t\treturn tokens.map(_.util.encode);\n\t\t\t} else {\n\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t}\n\t\t},\n\n\t\ttype: function (o) {\n\t\t\treturn Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];\n\t\t},\n\n\t\tobjId: function (obj) {\n\t\t\tif (!obj['__id']) {\n\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t}\n\t\t\treturn obj['__id'];\n\t\t},\n\n\t\t// Deep clone a language definition (e.g. to extend it)\n\t\tclone: function (o, visited) {\n\t\t\tvar type = _.util.type(o);\n\t\t\tvisited = visited || {};\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 'Object':\n\t\t\t\t\tif (visited[_.util.objId(o)]) {\n\t\t\t\t\t\treturn visited[_.util.objId(o)];\n\t\t\t\t\t}\n\t\t\t\t\tvar clone = {};\n\t\t\t\t\tvisited[_.util.objId(o)] = clone;\n\n\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tclone[key] = _.util.clone(o[key], visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn clone;\n\n\t\t\t\tcase 'Array':\n\t\t\t\t\tif (visited[_.util.objId(o)]) {\n\t\t\t\t\t\treturn visited[_.util.objId(o)];\n\t\t\t\t\t}\n\t\t\t\t\tvar clone = [];\n\t\t\t\t\tvisited[_.util.objId(o)] = clone;\n\n\t\t\t\t\to.forEach(function (v, i) {\n\t\t\t\t\t\tclone[i] = _.util.clone(v, visited);\n\t\t\t\t\t});\n\n\t\t\t\t\treturn clone;\n\t\t\t}\n\n\t\t\treturn o;\n\t\t}\n\t},\n\n\tlanguages: {\n\t\textend: function (id, redef) {\n\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\tfor (var key in redef) {\n\t\t\t\tlang[key] = redef[key];\n\t\t\t}\n\n\t\t\treturn lang;\n\t\t},\n\n\t\t/**\n\t\t * Insert a token before another token in a language literal\n\t\t * As this needs to recreate the object (we cannot actually insert before keys in object literals),\n\t\t * we cannot just provide an object, we need anobject and a key.\n\t\t * @param inside The key (or language id) of the parent\n\t\t * @param before The key to insert before. If not provided, the function appends instead.\n\t\t * @param insert Object with the key/value pairs to insert\n\t\t * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.\n\t\t */\n\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\troot = root || _.languages;\n\t\t\tvar grammar = root[inside];\n\n\t\t\tif (arguments.length == 2) {\n\t\t\t\tinsert = arguments[1];\n\n\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\tgrammar[newToken] = insert[newToken];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn grammar;\n\t\t\t}\n\n\t\t\tvar ret = {};\n\n\t\t\tfor (var token in grammar) {\n\n\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\tif (token == before) {\n\n\t\t\t\t\t\tfor (var newToken in insert) {\n\n\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update references in other language definitions\n\t\t\t_.languages.DFS(_.languages, function(key, value) {\n\t\t\t\tif (value === root[inside] && key != inside) {\n\t\t\t\t\tthis[key] = ret;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn root[inside] = ret;\n\t\t},\n\n\t\t// Traverse a language definition with Depth First Search\n\t\tDFS: function(o, callback, type, visited) {\n\t\t\tvisited = visited || {};\n\t\t\tfor (var i in o) {\n\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\tif (_.util.type(o[i]) === 'Object' && !visited[_.util.objId(o[i])]) {\n\t\t\t\t\t\tvisited[_.util.objId(o[i])] = true;\n\t\t\t\t\t\t_.languages.DFS(o[i], callback, null, visited);\n\t\t\t\t\t}\n\t\t\t\t\telse if (_.util.type(o[i]) === 'Array' && !visited[_.util.objId(o[i])]) {\n\t\t\t\t\t\tvisited[_.util.objId(o[i])] = true;\n\t\t\t\t\t\t_.languages.DFS(o[i], callback, i, visited);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tplugins: {},\n\n\thighlightAll: function(async, callback) {\n\t\t_.highlightAllUnder(document, async, callback);\n\t},\n\n\thighlightAllUnder: function(container, async, callback) {\n\t\tvar env = {\n\t\t\tcallback: callback,\n\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t};\n\n\t\t_.hooks.run(\"before-highlightall\", env);\n\n\t\tvar elements = env.elements || container.querySelectorAll(env.selector);\n\n\t\tfor (var i=0, element; element = elements[i++];) {\n\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t}\n\t},\n\n\thighlightElement: function(element, async, callback) {\n\t\t// Find language\n\t\tvar language, grammar, parent = element;\n\n\t\twhile (parent && !lang.test(parent.className)) {\n\t\t\tparent = parent.parentNode;\n\t\t}\n\n\t\tif (parent) {\n\t\t\tlanguage = (parent.className.match(lang) || [,''])[1].toLowerCase();\n\t\t\tgrammar = _.languages[language];\n\t\t}\n\n\t\t// Set language on the element, if not present\n\t\telement.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\n\t\tif (element.parentNode) {\n\t\t\t// Set language on the parent, for styling\n\t\t\tparent = element.parentNode;\n\n\t\t\tif (/pre/i.test(parent.nodeName)) {\n\t\t\t\tparent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\t\t\t}\n\t\t}\n\n\t\tvar code = element.textContent;\n\n\t\tvar env = {\n\t\t\telement: element,\n\t\t\tlanguage: language,\n\t\t\tgrammar: grammar,\n\t\t\tcode: code\n\t\t};\n\n\t\t_.hooks.run('before-sanity-check', env);\n\n\t\tif (!env.code || !env.grammar) {\n\t\t\tif (env.code) {\n\t\t\t\t_.hooks.run('before-highlight', env);\n\t\t\t\tenv.element.textContent = env.code;\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t}\n\t\t\t_.hooks.run('complete', env);\n\t\t\treturn;\n\t\t}\n\n\t\t_.hooks.run('before-highlight', env);\n\n\t\tif (async && _self.Worker) {\n\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\tworker.onmessage = function(evt) {\n\t\t\t\tenv.highlightedCode = evt.data;\n\n\t\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t};\n\n\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\tlanguage: env.language,\n\t\t\t\tcode: env.code,\n\t\t\t\timmediateClose: true\n\t\t\t}));\n\t\t}\n\t\telse {\n\t\t\tenv.highlightedCode = _.highlight(env.code, env.grammar, env.language);\n\n\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\tcallback && callback.call(element);\n\n\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t_.hooks.run('complete', env);\n\t\t}\n\t},\n\n\thighlight: function (text, grammar, language) {\n\t\tvar env = {\n\t\t\tcode: text,\n\t\t\tgrammar: grammar,\n\t\t\tlanguage: language\n\t\t};\n\t\t_.hooks.run('before-tokenize', env);\n\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t_.hooks.run('after-tokenize', env);\n\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t},\n\n\tmatchGrammar: function (text, strarr, grammar, index, startPos, oneshot, target) {\n\t\tvar Token = _.Token;\n\n\t\tfor (var token in grammar) {\n\t\t\tif(!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (token == target) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = (_.util.type(patterns) === \"Array\") ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tvar pattern = patterns[j],\n\t\t\t\t\tinside = pattern.inside,\n\t\t\t\t\tlookbehind = !!pattern.lookbehind,\n\t\t\t\t\tgreedy = !!pattern.greedy,\n\t\t\t\t\tlookbehindLength = 0,\n\t\t\t\t\talias = pattern.alias;\n\n\t\t\t\tif (greedy && !pattern.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = pattern.pattern.toString().match(/[imuy]*$/)[0];\n\t\t\t\t\tpattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");\n\t\t\t\t}\n\n\t\t\t\tpattern = pattern.pattern || pattern;\n\n\t\t\t\t// Don’t cache length as it changes during the loop\n\t\t\t\tfor (var i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {\n\n\t\t\t\t\tvar str = strarr[i];\n\n\t\t\t\t\tif (strarr.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (greedy && i != strarr.length - 1) {\n\t\t\t\t\t\tpattern.lastIndex = pos;\n\t\t\t\t\t\tvar match = pattern.exec(text);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index + (lookbehind ? match[1].length : 0),\n\t\t\t\t\t\t    to = match.index + match[0].length,\n\t\t\t\t\t\t    k = i,\n\t\t\t\t\t\t    p = pos;\n\n\t\t\t\t\t\tfor (var len = strarr.length; k < len && (p < to || (!strarr[k].type && !strarr[k - 1].greedy)); ++k) {\n\t\t\t\t\t\t\tp += strarr[k].length;\n\t\t\t\t\t\t\t// Move the index i to the element in strarr that is closest to from\n\t\t\t\t\t\t\tif (from >= p) {\n\t\t\t\t\t\t\t\t++i;\n\t\t\t\t\t\t\t\tpos = p;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If strarr[i] is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (strarr[i] instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Number of tokens to delete and replace with the new match\n\t\t\t\t\t\tdelNum = k - i;\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpattern.lastIndex = 0;\n\n\t\t\t\t\t\tvar match = pattern.exec(str),\n\t\t\t\t\t\t\tdelNum = 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!match) {\n\t\t\t\t\t\tif (oneshot) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(lookbehind) {\n\t\t\t\t\t\tlookbehindLength = match[1] ? match[1].length : 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar from = match.index + lookbehindLength,\n\t\t\t\t\t    match = match[0].slice(lookbehindLength),\n\t\t\t\t\t    to = from + match.length,\n\t\t\t\t\t    before = str.slice(0, from),\n\t\t\t\t\t    after = str.slice(to);\n\n\t\t\t\t\tvar args = [i, delNum];\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\t++i;\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t\targs.push(before);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar wrapped = new Token(token, inside? _.tokenize(match, inside) : match, alias, match, greedy);\n\n\t\t\t\t\targs.push(wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\targs.push(after);\n\t\t\t\t\t}\n\n\t\t\t\t\tArray.prototype.splice.apply(strarr, args);\n\n\t\t\t\t\tif (delNum != 1)\n\t\t\t\t\t\t_.matchGrammar(text, strarr, grammar, i, pos, true, token);\n\n\t\t\t\t\tif (oneshot)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\ttokenize: function(text, grammar, language) {\n\t\tvar strarr = [text];\n\n\t\tvar rest = grammar.rest;\n\n\t\tif (rest) {\n\t\t\tfor (var token in rest) {\n\t\t\t\tgrammar[token] = rest[token];\n\t\t\t}\n\n\t\t\tdelete grammar.rest;\n\t\t}\n\n\t\t_.matchGrammar(text, strarr, grammar, 0, 0, false);\n\n\t\treturn strarr;\n\t},\n\n\thooks: {\n\t\tall: {},\n\n\t\tadd: function (name, callback) {\n\t\t\tvar hooks = _.hooks.all;\n\n\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\thooks[name].push(callback);\n\t\t},\n\n\t\trun: function (name, env) {\n\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (var i=0, callback; callback = callbacks[i++];) {\n\t\t\t\tcallback(env);\n\t\t\t}\n\t\t}\n\t}\n};\n\nvar Token = _.Token = function(type, content, alias, matchedStr, greedy) {\n\tthis.type = type;\n\tthis.content = content;\n\tthis.alias = alias;\n\t// Copy of the full string this token was created from\n\tthis.length = (matchedStr || \"\").length|0;\n\tthis.greedy = !!greedy;\n};\n\nToken.stringify = function(o, language, parent) {\n\tif (typeof o == 'string') {\n\t\treturn o;\n\t}\n\n\tif (_.util.type(o) === 'Array') {\n\t\treturn o.map(function(element) {\n\t\t\treturn Token.stringify(element, language, o);\n\t\t}).join('');\n\t}\n\n\tvar env = {\n\t\ttype: o.type,\n\t\tcontent: Token.stringify(o.content, language, parent),\n\t\ttag: 'span',\n\t\tclasses: ['token', o.type],\n\t\tattributes: {},\n\t\tlanguage: language,\n\t\tparent: parent\n\t};\n\n\tif (o.alias) {\n\t\tvar aliases = _.util.type(o.alias) === 'Array' ? o.alias : [o.alias];\n\t\tArray.prototype.push.apply(env.classes, aliases);\n\t}\n\n\t_.hooks.run('wrap', env);\n\n\tvar attributes = Object.keys(env.attributes).map(function(name) {\n\t\treturn name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t}).join(' ');\n\n\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + (attributes ? ' ' + attributes : '') + '>' + env.content + '</' + env.tag + '>';\n\n};\n\nif (!_self.document) {\n\tif (!_self.addEventListener) {\n\t\t// in Node.js\n\t\treturn _self.Prism;\n\t}\n\n\tif (!_.disableWorkerMessageHandler) {\n\t\t// In worker\n\t\t_self.addEventListener('message', function (evt) {\n\t\t\tvar message = JSON.parse(evt.data),\n\t\t\t\tlang = message.language,\n\t\t\t\tcode = message.code,\n\t\t\t\timmediateClose = message.immediateClose;\n\n\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\t\tif (immediateClose) {\n\t\t\t\t_self.close();\n\t\t\t}\n\t\t}, false);\n\t}\n\n\treturn _self.Prism;\n}\n\n//Get current script and highlight\nvar script = document.currentScript || [].slice.call(document.getElementsByTagName(\"script\")).pop();\n\nif (script) {\n\t_.filename = script.src;\n\n\tif (!_.manual && !script.hasAttribute('data-manual')) {\n\t\tif(document.readyState !== \"loading\") {\n\t\t\tif (window.requestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(_.highlightAll);\n\t\t\t} else {\n\t\t\t\twindow.setTimeout(_.highlightAll, 16);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tdocument.addEventListener('DOMContentLoaded', _.highlightAll);\n\t\t}\n\t}\n}\n\nreturn _self.Prism;\n\n})();\n\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof global !== 'undefined') {\n\tglobal.Prism = Prism;\n}\n\n\n/* **********************************************\n     Begin prism-markup.js\n********************************************** */\n\nPrism.languages.markup = {\n\t'comment': /<!--[\\s\\S]*?-->/,\n\t'prolog': /<\\?[\\s\\S]+?\\?>/,\n\t'doctype': /<!DOCTYPE[\\s\\S]+?>/i,\n\t'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/i,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t/^=/,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /(^|[^\\\\])[\"']/,\n\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': /&#?[\\da-z]{1,8};/i\n};\n\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n\tPrism.languages.markup['entity'];\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function(env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nPrism.languages.xml = Prism.languages.markup;\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\n\n/* **********************************************\n     Begin prism-css.js\n********************************************** */\n\nPrism.languages.css = {\n\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n\t'atrule': {\n\t\tpattern: /@[\\w-]+?.*?(?:;|(?=\\s*\\{))/i,\n\t\tinside: {\n\t\t\t'rule': /@[\\w-]+/\n\t\t\t// See rest below\n\t\t}\n\t},\n\t'url': /url\\((?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|.*?)\\)/i,\n\t'selector': /[^{}\\s][^{};]*?(?=\\s*\\{)/,\n\t'string': {\n\t\tpattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'property': /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n\t'important': /\\B!important\\b/i,\n\t'function': /[-a-z0-9]+(?=\\()/i,\n\t'punctuation': /[(){};:]/\n};\n\nPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\n\nif (Prism.languages.markup) {\n\tPrism.languages.insertBefore('markup', 'tag', {\n\t\t'style': {\n\t\t\tpattern: /(<style[\\s\\S]*?>)[\\s\\S]*?(?=<\\/style>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.css,\n\t\t\talias: 'language-css',\n\t\t\tgreedy: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('inside', 'attr-value', {\n\t\t'style-attr': {\n\t\t\tpattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n\t\t\tinside: {\n\t\t\t\t'attr-name': {\n\t\t\t\t\tpattern: /^\\s*style/i,\n\t\t\t\t\tinside: Prism.languages.markup.tag.inside\n\t\t\t\t},\n\t\t\t\t'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,\n\t\t\t\t'attr-value': {\n\t\t\t\t\tpattern: /.+/i,\n\t\t\t\t\tinside: Prism.languages.css\n\t\t\t\t}\n\t\t\t},\n\t\t\talias: 'language-css'\n\t\t}\n\t}, Prism.languages.markup.tag);\n}\n\n/* **********************************************\n     Begin prism-clike.js\n********************************************** */\n\nPrism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\tpunctuation: /[.\\\\]/\n\t\t}\n\t},\n\t'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n\t'boolean': /\\b(?:true|false)\\b/,\n\t'function': /[a-z0-9_]+(?=\\()/i,\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n\t'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n\n\n/* **********************************************\n     Begin prism-javascript.js\n********************************************** */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n\t'keyword': /\\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\\b/,\n\t'number': /\\b(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*\\()/i,\n\t'operator': /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\tpattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[[^\\]\\r\\n]+]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n\t\tlookbehind: true,\n\t\tgreedy: true\n\t},\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\n\t'function-variable': {\n\t\tpattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i,\n\t\talias: 'function'\n\t},\n\t'constant': /\\b[A-Z][A-Z\\d_]*\\b/\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'template-string': {\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\${[^}]+}|[^\\\\`])*`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /\\${[^}]+}/,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\${|}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: null // See below\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t}\n});\nPrism.languages.javascript['template-string'].inside['interpolation'].inside.rest = Prism.languages.javascript;\n\nif (Prism.languages.markup) {\n\tPrism.languages.insertBefore('markup', 'tag', {\n\t\t'script': {\n\t\t\tpattern: /(<script[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript,\n\t\t\talias: 'language-javascript',\n\t\t\tgreedy: true\n\t\t}\n\t});\n}\n\nPrism.languages.js = Prism.languages.javascript;\n\n\n/* **********************************************\n     Begin prism-file-highlight.js\n********************************************** */\n\n(function () {\n\tif (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {\n\t\treturn;\n\t}\n\n\tself.Prism.fileHighlight = function() {\n\n\t\tvar Extensions = {\n\t\t\t'js': 'javascript',\n\t\t\t'py': 'python',\n\t\t\t'rb': 'ruby',\n\t\t\t'ps1': 'powershell',\n\t\t\t'psm1': 'powershell',\n\t\t\t'sh': 'bash',\n\t\t\t'bat': 'batch',\n\t\t\t'h': 'c',\n\t\t\t'tex': 'latex'\n\t\t};\n\n\t\tArray.prototype.slice.call(document.querySelectorAll('pre[data-src]')).forEach(function (pre) {\n\t\t\tvar src = pre.getAttribute('data-src');\n\n\t\t\tvar language, parent = pre;\n\t\t\tvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\n\t\t\twhile (parent && !lang.test(parent.className)) {\n\t\t\t\tparent = parent.parentNode;\n\t\t\t}\n\n\t\t\tif (parent) {\n\t\t\t\tlanguage = (pre.className.match(lang) || [, ''])[1];\n\t\t\t}\n\n\t\t\tif (!language) {\n\t\t\t\tvar extension = (src.match(/\\.(\\w+)$/) || [, ''])[1];\n\t\t\t\tlanguage = Extensions[extension] || extension;\n\t\t\t}\n\n\t\t\tvar code = document.createElement('code');\n\t\t\tcode.className = 'language-' + language;\n\n\t\t\tpre.textContent = '';\n\n\t\t\tcode.textContent = 'Loading…';\n\n\t\t\tpre.appendChild(code);\n\n\t\t\tvar xhr = new XMLHttpRequest();\n\n\t\t\txhr.open('GET', src, true);\n\n\t\t\txhr.onreadystatechange = function () {\n\t\t\t\tif (xhr.readyState == 4) {\n\n\t\t\t\t\tif (xhr.status < 400 && xhr.responseText) {\n\t\t\t\t\t\tcode.textContent = xhr.responseText;\n\n\t\t\t\t\t\tPrism.highlightElement(code);\n\t\t\t\t\t}\n\t\t\t\t\telse if (xhr.status >= 400) {\n\t\t\t\t\t\tcode.textContent = '✖ Error ' + xhr.status + ' while fetching file: ' + xhr.statusText;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tcode.textContent = '✖ Error: File does not exist or is empty';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\txhr.send(null);\n\t\t});\n\n\t\tif (Prism.plugins.toolbar) {\n\t\t\tPrism.plugins.toolbar.registerButton('download-file', function (env) {\n\t\t\t\tvar pre = env.element.parentNode;\n\t\t\t\tif (!pre || !/pre/i.test(pre.nodeName) || !pre.hasAttribute('data-src') || !pre.hasAttribute('data-download-link')) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar src = pre.getAttribute('data-src');\n\t\t\t\tvar a = document.createElement('a');\n\t\t\t\ta.textContent = pre.getAttribute('data-download-link-label') || 'Download';\n\t\t\t\ta.setAttribute('download', '');\n\t\t\t\ta.href = src;\n\t\t\t\treturn a;\n\t\t\t});\n\t\t}\n\n\t};\n\n\tdocument.addEventListener('DOMContentLoaded', self.Prism.fileHighlight);\n\n})();"],"sourceRoot":""}